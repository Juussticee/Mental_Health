from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

x_train_models = x_train.drop(columns=['A', 'B', 'C', 'G'])
x_test_models = x_test.drop(columns=['A', 'B', 'C', 'G'])

# Define models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5),
    "SVM": SVC(kernel='rbf', probability=True),
    "Naive Bayes": GaussianNB()
}

results = {}

# Train and evaluate each model
for name, model in models.items():
    model.fit(x_train_models, y_train)
    y_pred = model.predict(x_test_models)

    acc = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    results[name] = {"Accuracy": acc, "Precision": precision, "Recall": recall, "F1-Score": f1}

    print(f"Model: {name}")
    print(f"Accuracy: {acc:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1-Score: {f1:.4f}\n")

    # Compute confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.title(f"{name} Confusion Matrix")
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.show()

# Convert results to a table format
import pandas as pd
results_df = pd.DataFrame(results).T  # Transpose for better readability

# Print results as a table
print("\nModel Performance Summary:")
print(results_df)

# Plot comparison of models
plt.figure(figsize=(10, 6))
results_df.plot(kind='bar', figsize=(10, 6), colormap="viridis")
plt.title("Comparison of Model Performance")
plt.xlabel("Model")
plt.ylabel("Score")
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.legend(loc="lower right")
plt.show()

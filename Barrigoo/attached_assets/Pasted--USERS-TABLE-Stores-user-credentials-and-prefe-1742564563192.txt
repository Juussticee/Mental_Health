-------------------------------------------------
-- USERS TABLE: Stores user credentials and preferences.
-------------------------------------------------
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL 
          CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z]{2,}$'),
    password_hash TEXT NOT NULL,  -- Store hashed passwords (e.g., bcrypt)
    dietary_preferences JSONB DEFAULT '{}'::JSONB,  -- Flexible storage for preferences (allergies, restrictions)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes to speed up common lookups.
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);

-------------------------------------------------
-- CATEGORIES TABLE: Used to categorize meals (e.g., Breakfast, Lunch, Dinner).
-------------------------------------------------
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(50) NOT NULL UNIQUE
);

-------------------------------------------------
-- INGREDIENTS TABLE: Stores unique ingredients.
-------------------------------------------------
CREATE TABLE ingredients (
    ingredient_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    -- Optionally, store a default unit (e.g., g, ml) and category (e.g., Meat, Vegetable)
    category VARCHAR(100),
    unit VARCHAR(20) DEFAULT 'g',
    UNIQUE(name)
);

-------------------------------------------------
-- NUTRITIONAL_INFO TABLE: Stores detailed nutritional values per ingredient per cooking method.
-- Values are stored per 100g (or per 100 ml) of the ingredient.
-------------------------------------------------
CREATE TABLE nutritional_info (
    nutrition_id SERIAL PRIMARY KEY,
    ingredient_id INT REFERENCES ingredients(ingredient_id) ON DELETE CASCADE,
    cooking_method VARCHAR(50) 
          CHECK (cooking_method IN ('raw', 'boiled', 'grilled', 'fried', 'baked')),
    nutrition JSONB NOT NULL DEFAULT '{}'::JSONB,  
    UNIQUE (ingredient_id, cooking_method)
);
/*
  Example JSON in "nutrition" column:
  {
    "calories": 165,
    "protein": 31,
    "fat": 3.6,
    "carbs": 0,
    "fiber": 0,
    "sugars": 0
  }
*/

-------------------------------------------------
-- MEALS TABLE: Stores information about meals created by users.
-- Also stores basic nutritional summary if calculated and stored.
-------------------------------------------------
CREATE TABLE meals (
    meal_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    meal_name VARCHAR(255) NOT NULL,
    category_id INT REFERENCES categories(category_id) ON DELETE SET NULL,  -- If category removed, set to NULL
    nutrition JSONB NOT NULL DEFAULT '{}'::JSONB,  -- Optional: pre-calculated total nutrition for the meal.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_meals_user ON meals(user_id);

-------------------------------------------------
-- MEAL_INGREDIENTS TABLE: A join table that links meals to ingredients.
-- It records the quantity and unit used, as well as the cooking method for that ingredient in the meal.
-------------------------------------------------
CREATE TABLE meal_ingredients (
    meal_id INT REFERENCES meals(meal_id) ON DELETE CASCADE,
    ingredient_id INT REFERENCES ingredients(ingredient_id) ON DELETE CASCADE,
    quantity DECIMAL(10,2) NOT NULL,  -- Quantity used (e.g., 200 for 200g)
    unit VARCHAR(20) CHECK (unit IN ('g', 'ml', 'piece', 'cup', 'tbsp', 'tsp')),
    cooking_method VARCHAR(50) 
          CHECK (cooking_method IN ('raw', 'boiled', 'grilled', 'fried', 'baked')),
    PRIMARY KEY (meal_id, ingredient_id, cooking_method)
);

CREATE INDEX idx_meal_ingredients_meal ON meal_ingredients(meal_id);
CREATE INDEX idx_meal_ingredients_ingredient ON meal_ingredients(ingredient_id);

-------------------------------------------------
-- FOOD_HABITS TABLE: Tracks user food-related habits (e.g., "Eat more vegetables", "Drink 2L water daily").
-------------------------------------------------
CREATE TABLE food_habits (
    habit_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    habit_name VARCHAR(255) NOT NULL,
    frequency VARCHAR(50) CHECK (frequency IN ('daily', 'weekly', 'monthly')),
    start_date DATE NOT NULL,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'paused', 'completed'))
);

CREATE INDEX idx_food_habits_user ON food_habits(user_id);

-------------------------------------------------
-- AI_GENERATED_RECIPES TABLE: Stores recipes generated by the AI.
-- Ingredients are stored as JSONB for flexibility.
-------------------------------------------------
CREATE TABLE ai_generated_recipes (
    recipe_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    generated_from VARCHAR(50) CHECK (generated_from IN ('ingredients', 'photo', 'nutrition_goal')),
    recipe_name VARCHAR(255),
    ingredients JSONB NOT NULL,  -- Structured data; example: [{"ingredient_id": 1, "quantity": 150, "unit": "g", "cooking_method": "grilled"}, ...]
    instructions TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_ai_generated_recipes_user ON ai_generated_recipes(user_id);

-------------------------------------------------
-- CHATBOT_INTERACTIONS TABLE: Logs interactions between users and the chatbot.
-------------------------------------------------
CREATE TABLE chatbot_interactions (
    chat_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    user_input TEXT NOT NULL,
    bot_response TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_chatbot_user ON chatbot_interactions(user_id);
CREATE INDEX idx_chatbot_timestamp ON chatbot_interactions(timestamp);

-------------------------------------------------
-- AUDIT_LOGS TABLE: Tracks significant user actions for security and monitoring.
-------------------------------------------------
CREATE TABLE audit_logs (
    log_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    action VARCHAR(255) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-------------------------------------------------
-- USER_ROLES TABLE: Defines roles (e.g., admin, user, moderator).
-------------------------------------------------
CREATE TABLE user_roles (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL  -- Example: 'admin', 'user'
);

-------------------------------------------------
-- USER_ROLE_ASSOCIATIONS TABLE: Many-to-many relationship linking users with roles.
-------------------------------------------------
CREATE TABLE user_role_associations (
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    role_id INT REFERENCES user_roles(role_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

